包含知识点：

1.class 
	类，面向对象的基础。类似于分类的意义，将特定的数据以及其所能执行的操作封装在一起变构成了类的概念。有利于数据封装和信息隐藏
	声明一个类
		class ClassName;
	定义一个类
		class ClassName{
			public:
				成员类型 成员名称
			protected:
				成员类型 成员名称
			private:
				成员类型 成员名称
		};
		类成员可以为数据或函数
		三个访问控制意义（顺序可替换）：
			public：公开，可以被任何人看到
			protected：有限公开，其派生类也可访问
			private：只有该对象可以访问
2.函数
	定义类似于数学上的函数，将一系列操作封装成函数便于调用，可以简化代码量，增加可读性。
	函数声明
		函数返回类型 函数名(参数1类型 参数1,参数2类型 参数2,...);
	函数定义
		函数返回类型 函数名(参数1类型 参数1,参数2类型 参数2,...){
			函数具体实现;
			return 返回值;
		}
	若函数不需要返回值，即可使用void作为返回值。
	函数返回值可以是字符，数值，指针，类（首地址）。
	但不能返回一个数组。
3.vector类
	相当于一个动态数组的概念。
	若要使用vector类，需要在程序头前加入
		#include<vector>
	变量声明
		vector<类型> 变量名
	vector可进行操作
                             .clear()         	移除容器中所有数据。

                             .empty()         	判断容器是否为空。

                             .erase(pos)        删除pos位置的数据

                             .erase(beg,end) 	删除[beg,end)区间的数据

                             .front()         	传回第一个数据。

                             .insert(pos,elem)  在pos位置插入一个elem拷贝

                             .pop_back()     	删除最后一个数据。

                             .push_back(elem) 	在尾部加入一个数据。

                             .resize(num)     	重新设置该容器的大小

                             .size()         	回容器中实际数据的个数。

                             .begin()           返回指向容器第一个元素

                             .end()             返回指向容器最后一个元素
	
5.if语句
	条件判断语句，基本用法如下：
		if(条件判断式){语句;}
		若条件判断式非0，执行if后的语句。
	
		if(条件判断式){语句;}
		else {语句;}
		若条件判断式非0，执行if后的语句,否则执行else后的语句。

		if(条件判断式){语句;}
		else if(条件判断式){语句;}
		else {语句;}
6.for循环
	循环控制语句，基本用法如下：
		for(循环控制变量初始化;循环结束条件;循环控制变量变化方式){语句}
		若循环结束条件非0，循环一直运行
		循环控制变量变化方式指每进行一次循环对循环控制变量进行什么操作
7.hash表
	哈希表是根据关键码值(Key value)而直接进行访问的数据结构。通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。
	通过哈希表可以极大的加快对数组元素的查找。其核心的想法在于使用空间交换时间，使用哈希表会导致算法的空间复杂度提高
